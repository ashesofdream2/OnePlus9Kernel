name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      device:
        description: '设备名称'
        required: true
        default: 'LUNAA'
        type: choice
        options:
          - 9P
          - 9RT
          - LUNAA
      enable_kernelsu:
        description: '启用 KernelSU'
        required: true
        default: 'true'
        type: boolean
      enable_docker:
        description: '启用 Docker 支持'
        required: true
        default: 'false'
        type: boolean
      enable_rootguard:
        description: '启用 RootGuard'
        required: true
        default: 'false'
        type: boolean
      lto_type:
        description: 'LTO 类型'
        required: true
        default: 'full'
        type: choice
        options:
          - none
          - thin
          - full

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    container:
      image: archlinux:base-devel
      options: --privileged -v /workspace:/workspace
      working_directory: /workspace

    steps:
      - name: 安装基础工具和 repo
        run: |
          pacman -Syu --noconfirm git base-devel wget curl openssh ccache python3 which
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          echo "export PATH=~/bin:\$PATH" >> ~/.bashrc
          source ~/.bashrc
          echo "~/bin" >> $GITHUB_PATH
          repo --version
        working-directory: /workspace

      - name: 设置用户和工作目录
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          mkdir -p /workspace
          chown -R builder:builder /workspace
          ls -la /workspace
        working-directory: /workspace

      - name: 准备环境变量
        run: |
          echo "LC_ALL=C" >> $GITHUB_ENV
          echo "SOURCE_PATH=/workspace/android_kernel_manifest" >> $GITHUB_ENV
          echo "CLANG_PATH=/workspace/android_kernel_manifest/prebuilts-master/clang/host/linux-x86/clang-r450784d" >> $GITHUB_ENV
          echo "CONFIG_KERNELSU=${{ github.event.inputs.enable_kernelsu }}" >> $GITHUB_ENV
          echo "KERNELSU_TAG=main" >> $GITHUB_ENV
          echo "CONFIG_DOCKER=${{ github.event.inputs.enable_docker }}" >> $GITHUB_ENV
          echo "CONFIG_ROOTGUARD=${{ github.event.inputs.enable_rootguard }}" >> $GITHUB_ENV
          echo "DEVICE_NAME=${{ github.event.inputs.device }}" >> $GITHUB_ENV
          echo "CONFIG_LTO=${{ github.event.inputs.lto_type }}" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          echo "CCACHE_DIR=/workspace/ccache" >> $GITHUB_ENV
        working-directory: /workspace

      - name: 设置 ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: kernel-build-${{ github.sha }}
          max-size: 5G

      - name: 运行 build.sh 脚本
        run: |
          cd $SOURCE_PATH
          chmod +x build.sh
          sudo -u builder ./build.sh
        env:
          MAKEFLAGS: "-j$(nproc --all)"
        working-directory: /workspace

      - name: 显示 ccache 统计信息
        run: ccache -s
        working-directory: /workspace

      - name: 查找编译结果
        id: find_artifacts
        run: |
          echo "zip_file=$(ls $SOURCE_PATH/*.zip | grep -v backup || true)" >> $GITHUB_OUTPUT
          echo "rootguard_file=$(ls $SOURCE_PATH/rootguard-*.zip || true)" >> $GITHUB_OUTPUT
        working-directory: /workspace

      - name: 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.event.inputs.device }}-${{ github.sha }}
          path: |
            ${{ steps.find_artifacts.outputs.zip_file }}
            ${{ steps.find_artifacts.outputs.rootguard_file }}
          retention-days: 7
